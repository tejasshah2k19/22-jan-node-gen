npm init 

var let const 

function 

exports 

require 


npm install nodemon -g 



MEAN 
Mongo 
Express 
Angular
Node 

-------------------------------------

npm install express --save 

npm install express -g 


-------------------------------------

npm init 
install all necessary dep 
    express 
    #nodemon 
    #mongodb 


1) index.js 
2) create all the MVC folders  - controllers model - *views 


------------------------------------------
api - urls 

SOAP  - xml 
     
REST - json 
REST api -- urls 
1) data -> req , res --> json 

url 

user -> db => signup 

new resource 
            HTTP method     url
new         POST            /user           [body data]
read        GET             /user/:userId       /user/2
read        GET             #/users or /user 
destroy 
remove      DELETE         /user/:userId       /user/2 
modify
update      PUT/PATCH       /user/:userId      [body data]  /user/2 




REST => Represenatational state transfer 

------------------------------------------

lottery app  

signup -> email / password  / firstName :  [ email must be unique ]

tejas@gmail.com 
password123
tejas 
signup --> generate  a unique lotter number [ lottery ticket ] for user [ response ]


tejas       tejas@gmail.com     password123         123456789           2000
ram         ram@gmail.com       ram123              562365982           5000
sita        sita@gmail.com      sitaram             767685534           12000
laxman      laxman@gmail.com    lucky               876345844           6000


can spin the wheel 
            it will generate a lottery number and declare the winner 
            767685534
            1000 credit into sita's account 

            2nd time 
            767685534
            1000 credit into sita's account 

can view DashBoard  [ winner to looser ]
                    sita        sita@gmail.com      sitaram             767685534           12000
                    laxman      laxman@gmail.com    lucky               876345844           6000
                    ram         ram@gmail.com       ram123              562365982           5000
                    tejas       tejas@gmail.com     password123         123456789           2000
                

can view winner 
                    sita        sita@gmail.com      sitaram             767685534           12000






res.json({data:req.body,status:-1,msg:"Email Already Taken"})

--------------------------------------------------------------------------------------

sql

noSql
    functions 

    RDBMS 

    table ---------- collection 
    record --------  document 
    column/field  ----- field


    RDBMS -- join 

    sal  
            post:{

                    title:"i will marry with ________?"
                    ans:{
                        "katrina":"bhadma ja",
                        "aish":"not int",


                    }
            }

        post 
            postid  userid  post 
            1          1    i will marry with ____ ?  

        post_comment 
            postid   userid  comment 
            1           3       xxxxx
            1           4       xxxxx


         i will marry with __________ ?
                katrina   XXXXX 
                aish      XXXXX 


mongod 
mongo 

collection --> table 

show dbs --> list all databases 

use meandec; 

db.createCollection("users")

show tables 

show dbs 

db.users.insert({key:value})

db.users.find()

12 byte 

    4  timestamp
    3  machine 
    2  process   
    3  counter - random value 

999

X-XXXXXXXYYY

1-00000000  [100] [150] [XXX]


db.users.find().pretty()
------------------------------------------


insert ---> 
        insert()
            db.users.insert({firstName:"balram",email:"balram@gmail.com",password:"pass234"})
            db.users.insert([
                    {firstName:"superman",email:"superman@gmail.com",password:"super234"},
                    {firstName:"batman",email:"batman@gmail.com",password:"bat234"}
            ])
        save() 
            db.users.save({firstName:"baldev",email:"baldev@gmail.com",password:"pass234"})



            # only insert 
             db.users.save([
                {firstName:"bhim",email:"bhim@gmail.com",password:"bhim234"},
                {firstName:"arjun",email:"arjun@gmail.com",password:"arjun234"}
            ])


            db.users.save(  
                {_id:ObjectId("61f152561ba0a253d1021a60"),firstName:"arjun1",email:"arjun@gmail.com",password:"arjun234"}
             )

        insertOne()
            db.users.insertOne({firstName:"spiderman",email:"spidey@gmail.com",password:"12345"})

        insertMany()
        
--------------------------- data type -----------------------------------
String 
Integer
Double 
Boolean 
timestamp 
Date 
ObjectID 
array
embeded 
.....


select * from users where name like 'arjun' 

db.users.find({name:"arjun"}).pretty()


db.users.find({firstName:"arjun"}).pretty()


login :- 

email = xxxx and password = xxx 

db.users.find({email:"bhim@gmail.com",password:"1234"}).pretty()


db.users.find({email:"bhim@gmail.com",password:"bhim234"}).pretty()


bhim or ram 

db.users.find({firstName:"bhim"},{firstName:"ram"}).pretty()

db.users.find(
   { $or:
       [ {firstName:"bhim"},{firstName:"ram"} ] 
   }
).pretty()




select firstName from users;



db.users.find({firstName:"bhim"},{firstName:1,_id:0}).pretty()

---------------------------------------update--------------------------------------

save()

db.users.save({
    firstName:"chamber",
    email:"chamger@gmail.com",
    _id:121212
})

db.users.save({
    firstName:"chambers",
    email:"chamger@gmail.com",
    _id:121212
})

db.users.update(
    {
        _id:121212 
    },
    {
        firstName:"chamger123"
    }
)



db.users.update(
    {
        _id:121212 
    },
    {
        $set:{ 
            firstName:"chamger123"
        }
    }
)

updateOne 
updateMany

findOneAndUpdate

db.users.findOneAndUpdate({_id:121212},{
    $set:{
        firstName:"chamber"
    }
})

-----------------------------delete records ----------------


db.users.save({
    firstName:"chambers",
    email:"chamger@gmail.com",
    _id:121213
})


db.users.save({
    firstName:"chambers",
    email:"chamger@gmail.com",
    _id:121214
})


db.users.remove({firstName:"chambers"})

db.users.remove({firstName:"chambers"},1)

-------------------------------------------limit--skip---------------------------------------

db.users.limit(5)

db.users.find({firstName:"sachin"}).limit(5)

db.users.find({firstName:"sachin"}).limit(5).skip(5)


-------------------------------------------sort()---------------------------------------
 
 1 -> asc 

db.users.find().sort({firstName:1})


db.users.find().sort({firstName:1})

db.users.find().sort({firstName:-1})

db.users.find().sort({firstName:1,email:1})

roy xxx
roy yyy 


db.users.find({},{_id:0,firstName:1}).sort({firstName:1})


let users = db.users.findOne()

db.users.save({req.body})

db.users.update({_id:req.body.userId},{req.body})

let user  = user.find()


-------------------------------------------aggregate---------------------------------------
 select count(*) from users 
 select count(*) from users group by city; 


 db.users.aggregate([ 
     { $group : 
        { 
            _id:"$city",
            totalUsers:{
                $sum:1 
            }
        }
     }
 ])
 
--------------------------------------------------------------------------------------------------

node --> mongodb 

1) native  [ node --> mongodb --> db ]
2) lib  --> orm --> model --> schema -> data type --> validation -->
        object relational mapping 
        class/object   table/record 
      
        User user = new User({
            firstName:req.body.firstName
            password:req
        });
        user.save() // 

orm --> mongoose 





UserModel --> crud --> PK --> _id
users -> _id firstName email password 
    add fk from role 

RoleModel --> roles --> _id roleName 


-----------------------------------------











































































 




























































































